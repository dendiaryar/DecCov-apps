{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "registerAuthorizeUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "7": "contracts/Registry/RegistryAuthorization.sol"
  },
  "ast": {
    "absolutePath": "contracts/Registry/RegistryAuthorization.sol",
    "exportedSymbols": {
      "RegistryAuthorization": [
        384
      ]
    },
    "id": 385,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 315,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:31:7"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 384,
        "linearizedBaseContracts": [
          384
        ],
        "name": "RegistryAuthorization",
        "nameLocation": "144:21:7",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "8da5cb5b",
            "id": 317,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "196:5:7",
            "nodeType": "VariableDeclaration",
            "scope": 384,
            "src": "173:28:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 316,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "173:15:7",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 321,
            "mutability": "mutable",
            "name": "authorize_user",
            "nameLocation": "242:14:7",
            "nodeType": "VariableDeclaration",
            "scope": 384,
            "src": "207:49:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 320,
              "keyType": {
                "id": 318,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "215:7:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "207:25:7",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 319,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "226:4:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 325,
            "mutability": "mutable",
            "name": "issuerMapping",
            "nameLocation": "294:13:7",
            "nodeType": "VariableDeclaration",
            "scope": 384,
            "src": "267:40:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
              "typeString": "mapping(address => bytes32)"
            },
            "typeName": {
              "id": 324,
              "keyType": {
                "id": 322,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "276:7:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "267:26:7",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
                "typeString": "mapping(address => bytes32)"
              },
              "valueType": {
                "id": 323,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "285:7:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 336,
              "nodeType": "Block",
              "src": "336:44:7",
              "statements": [
                {
                  "expression": {
                    "id": 334,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 328,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 317,
                      "src": "346:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 331,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "362:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 332,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "362:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 330,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "354:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_payable_$",
                          "typeString": "type(address payable)"
                        },
                        "typeName": {
                          "id": 329,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "354:8:7",
                          "stateMutability": "payable",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 333,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "354:19:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "346:27:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 335,
                  "nodeType": "ExpressionStatement",
                  "src": "346:27:7"
                }
              ]
            },
            "id": 337,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 326,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "325:2:7"
            },
            "returnParameters": {
              "id": 327,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "336:0:7"
            },
            "scope": 384,
            "src": "314:66:7",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 352,
              "nodeType": "Block",
              "src": "489:86:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 348,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 343,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 340,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "507:3:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 341,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "507:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 342,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 317,
                            "src": "521:5:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "507:19:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "baseExpression": {
                            "id": 344,
                            "name": "authorize_user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 321,
                            "src": "530:14:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 347,
                          "indexExpression": {
                            "expression": {
                              "id": 345,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "545:3:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 346,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "545:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "530:26:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "507:49:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 339,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "499:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 349,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "499:58:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 350,
                  "nodeType": "ExpressionStatement",
                  "src": "499:58:7"
                },
                {
                  "id": 351,
                  "nodeType": "PlaceholderStatement",
                  "src": "567:1:7"
                }
              ]
            },
            "id": 353,
            "name": "grantAccess",
            "nameLocation": "478:11:7",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 338,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "489:0:7"
            },
            "src": "469:106:7",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 382,
              "nodeType": "Block",
              "src": "672:175:7",
              "statements": [
                {
                  "condition": {
                    "id": 368,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "685:33:7",
                    "subExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 366,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 362,
                              "name": "authorize_user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 321,
                              "src": "687:14:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 364,
                            "indexExpression": {
                              "id": 363,
                              "name": "_address",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 355,
                              "src": "702:8:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "687:24:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "74727565",
                            "id": 365,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "713:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "687:30:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 367,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "686:32:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 380,
                    "nodeType": "Block",
                    "src": "804:37:7",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "66616c7365",
                          "id": 378,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "825:5:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 361,
                        "id": 379,
                        "nodeType": "Return",
                        "src": "818:12:7"
                      }
                    ]
                  },
                  "id": 381,
                  "nodeType": "IfStatement",
                  "src": "682:159:7",
                  "trueBody": {
                    "id": 377,
                    "nodeType": "Block",
                    "src": "719:81:7",
                    "statements": [
                      {
                        "expression": {
                          "id": 373,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 369,
                              "name": "authorize_user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 321,
                              "src": "733:14:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 371,
                            "indexExpression": {
                              "id": 370,
                              "name": "_address",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 355,
                              "src": "748:8:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "733:24:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 372,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "760:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "733:31:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 374,
                        "nodeType": "ExpressionStatement",
                        "src": "733:31:7"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 375,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "785:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 361,
                        "id": 376,
                        "nodeType": "Return",
                        "src": "778:11:7"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "6210d360",
            "id": 383,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 358,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 357,
                  "name": "grantAccess",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 353,
                  "src": "638:11:7"
                },
                "nodeType": "ModifierInvocation",
                "src": "638:11:7"
              }
            ],
            "name": "registerAuthorizeUser",
            "nameLocation": "591:21:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 356,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 355,
                  "mutability": "mutable",
                  "name": "_address",
                  "nameLocation": "621:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 383,
                  "src": "613:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 354,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "613:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "612:18:7"
            },
            "returnParameters": {
              "id": 361,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 360,
                  "mutability": "mutable",
                  "name": "success",
                  "nameLocation": "663:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 383,
                  "src": "658:12:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 359,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "658:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "657:14:7"
            },
            "scope": 384,
            "src": "582:265:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 385,
        "src": "135:714:7",
        "usedErrors": []
      }
    ],
    "src": "32:817:7"
  },
  "bytecode": "6080604052600080546001600160a01b0319163317905561017c806100256000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636210d3601461003b5780638da5cb5b14610063575b600080fd5b61004e610049366004610116565b61008e565b60405190151581526020015b60405180910390f35b600054610076906001600160a01b031681565b6040516001600160a01b03909116815260200161005a565b600080546001600160a01b03163314806100b757503360009081526001602052604090205460ff165b6100c057600080fd5b6001600160a01b03821660009081526001602081905260409091205460ff1615151461010e57506001600160a01b03166000908152600160208190526040909120805460ff19168217905590565b506000919050565b60006020828403121561012857600080fd5b81356001600160a01b038116811461013f57600080fd5b939250505056fea26469706673582212205205f13534ac6cd345ac747ac5fcf5a049084d2d9a0815b21735d4f91d7d829a64736f6c63430008070033",
  "bytecodeSha1": "0196752548d7ffae0d33c7024d506a6aa0e09cce",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.7+commit.e28d00a7"
  },
  "contractName": "RegistryAuthorization",
  "coverageMap": {
    "branches": {
      "7": {
        "RegistryAuthorization.registerAuthorizeUser": {
          "2": [
            507,
            526,
            true
          ],
          "3": [
            530,
            556,
            true
          ]
        }
      }
    },
    "statements": {
      "7": {
        "RegistryAuthorization.registerAuthorizeUser": {
          "0": [
            733,
            764
          ],
          "1": [
            818,
            830
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100365760003560e01c80636210d3601461003b5780638da5cb5b14610063575b600080fd5b61004e610049366004610116565b61008e565b60405190151581526020015b60405180910390f35b600054610076906001600160a01b031681565b6040516001600160a01b03909116815260200161005a565b600080546001600160a01b03163314806100b757503360009081526001602052604090205460ff165b6100c057600080fd5b6001600160a01b03821660009081526001602081905260409091205460ff1615151461010e57506001600160a01b03166000908152600160208190526040909120805460ff19168217905590565b506000919050565b60006020828403121561012857600080fd5b81356001600160a01b038116811461013f57600080fd5b939250505056fea26469706673582212205205f13534ac6cd345ac747ac5fcf5a049084d2d9a0815b21735d4f91d7d829a64736f6c63430008070033",
  "deployedSourceMap": "135:714:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;582:265;;;;;;:::i;:::-;;:::i;:::-;;;694:14:8;;687:22;669:41;;657:2;642:18;582:265:7;;;;;;;;173:28;;;;;-1:-1:-1;;;;;173:28:7;;;;;;-1:-1:-1;;;;;485:32:8;;;467:51;;455:2;440:18;173:28:7;305:219:8;582:265:7;658:12;521:5;;-1:-1:-1;;;;;521:5:7;507:10;:19;;:49;;-1:-1:-1;545:10:7;530:26;;;;:14;:26;;;;;;;;507:49;499:58;;;;;;-1:-1:-1;;;;;687:24:7;::::1;;::::0;;;:14:::1;:24;::::0;;;;;;;;::::1;;:30;;;682:159;;-1:-1:-1::0;;;;;;733:24:7::1;;::::0;;;760:4:::1;733:24;::::0;;;;;;;:31;;-1:-1:-1;;733:31:7::1;::::0;::::1;::::0;;760:4;582:265::o;682:159::-:1;-1:-1:-1::0;825:5:7::1;582:265:::0;;;:::o;14:286:8:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;168:23;;-1:-1:-1;;;;;220:31:8;;210:42;;200:70;;266:1;263;256:12;200:70;289:5;14:286;-1:-1:-1;;;14:286:8:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    135,
    849
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6210D360 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x63 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x76 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5A JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xB7 JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0xC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x10E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE SDIV CALL CALLDATALOAD CALLVALUE 0xAC PUSH13 0xD345AC747AC5FCF5A049084D2D SWAP11 ADDMOD ISZERO 0xB2 OR CALLDATALOAD 0xD4 0xF9 SAR PUSH30 0x829A64736F6C634300080700330000000000000000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        135,
        849
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "5": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "CALLVALUE",
      "path": "7"
    },
    "6": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "DUP1",
      "path": "7"
    },
    "7": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "8": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "12": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "DUP1",
      "path": "7"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "REVERT",
      "path": "7"
    },
    "16": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "17": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "POP",
      "path": "7"
    },
    "18": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "CALLDATASIZE",
      "path": "7"
    },
    "21": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "LT",
      "path": "7"
    },
    "22": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x36"
    },
    "25": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "26": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "CALLDATALOAD",
      "path": "7"
    },
    "29": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "SHR",
      "path": "7"
    },
    "32": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "DUP1",
      "path": "7"
    },
    "33": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0x6210D360"
    },
    "38": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "EQ",
      "path": "7"
    },
    "39": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x3B"
    },
    "42": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "43": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "DUP1",
      "path": "7"
    },
    "44": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0x8DA5CB5B"
    },
    "49": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "EQ",
      "path": "7"
    },
    "50": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x63"
    },
    "53": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "54": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "55": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "57": {
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "DUP1",
      "path": "7"
    },
    "58": {
      "first_revert": true,
      "fn": null,
      "offset": [
        135,
        849
      ],
      "op": "REVERT",
      "path": "7"
    },
    "59": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "60": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x4E"
    },
    "63": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x49"
    },
    "66": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "CALLDATASIZE",
      "path": "7"
    },
    "67": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "69": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x116"
    },
    "72": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "jump": "i",
      "offset": [
        582,
        847
      ],
      "op": "JUMP",
      "path": "7"
    },
    "73": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "74": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x8E"
    },
    "77": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "jump": "i",
      "offset": [
        582,
        847
      ],
      "op": "JUMP",
      "path": "7"
    },
    "78": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "79": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "81": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "82": {
      "op": "SWAP1"
    },
    "83": {
      "op": "ISZERO"
    },
    "84": {
      "op": "ISZERO"
    },
    "85": {
      "op": "DUP2"
    },
    "86": {
      "op": "MSTORE"
    },
    "87": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "89": {
      "op": "ADD"
    },
    "90": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "91": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "93": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "94": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "DUP1",
      "path": "7"
    },
    "95": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "96": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "SUB",
      "path": "7"
    },
    "97": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "98": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "RETURN",
      "path": "7"
    },
    "99": {
      "offset": [
        173,
        201
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "100": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        173,
        201
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "102": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        173,
        201
      ],
      "op": "SLOAD",
      "path": "7"
    },
    "103": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        173,
        201
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x76"
    },
    "106": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        173,
        201
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "107": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "109": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "111": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "113": {
      "op": "SHL"
    },
    "114": {
      "op": "SUB"
    },
    "115": {
      "offset": [
        173,
        201
      ],
      "op": "AND",
      "path": "7"
    },
    "116": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        173,
        201
      ],
      "op": "DUP2",
      "path": "7"
    },
    "117": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        173,
        201
      ],
      "op": "JUMP",
      "path": "7"
    },
    "118": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        173,
        201
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "119": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        173,
        201
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "121": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        173,
        201
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "122": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "124": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "126": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "128": {
      "op": "SHL"
    },
    "129": {
      "op": "SUB"
    },
    "130": {
      "op": "SWAP1"
    },
    "131": {
      "op": "SWAP2"
    },
    "132": {
      "op": "AND"
    },
    "133": {
      "op": "DUP2"
    },
    "134": {
      "op": "MSTORE"
    },
    "135": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "137": {
      "op": "ADD"
    },
    "138": {
      "offset": [
        173,
        201
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x5A"
    },
    "141": {
      "op": "JUMP"
    },
    "142": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "143": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        658,
        670
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "145": {
      "offset": [
        521,
        526
      ],
      "op": "DUP1",
      "path": "7"
    },
    "146": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        521,
        526
      ],
      "op": "SLOAD",
      "path": "7"
    },
    "147": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "149": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "151": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "153": {
      "op": "SHL"
    },
    "154": {
      "op": "SUB"
    },
    "155": {
      "offset": [
        521,
        526
      ],
      "op": "AND",
      "path": "7"
    },
    "156": {
      "offset": [
        507,
        517
      ],
      "op": "CALLER",
      "path": "7"
    },
    "157": {
      "offset": [
        507,
        526
      ],
      "op": "EQ",
      "path": "7"
    },
    "158": {
      "branch": 2,
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        507,
        526
      ],
      "op": "DUP1",
      "path": "7"
    },
    "159": {
      "offset": [
        507,
        556
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xB7"
    },
    "162": {
      "branch": 2,
      "offset": [
        507,
        556
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "163": {
      "op": "POP"
    },
    "164": {
      "offset": [
        545,
        555
      ],
      "op": "CALLER",
      "path": "7"
    },
    "165": {
      "offset": [
        530,
        556
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "167": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        530,
        556
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "168": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        530,
        556
      ],
      "op": "DUP2",
      "path": "7"
    },
    "169": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        530,
        556
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "170": {
      "offset": [
        530,
        544
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1"
    },
    "172": {
      "offset": [
        530,
        556
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "174": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        530,
        556
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "175": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        530,
        556
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "177": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        530,
        556
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "178": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        530,
        556
      ],
      "op": "KECCAK256",
      "path": "7"
    },
    "179": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        530,
        556
      ],
      "op": "SLOAD",
      "path": "7"
    },
    "180": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        530,
        556
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xFF"
    },
    "182": {
      "branch": 3,
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        530,
        556
      ],
      "op": "AND",
      "path": "7"
    },
    "183": {
      "offset": [
        507,
        556
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "184": {
      "offset": [
        499,
        557
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xC0"
    },
    "187": {
      "branch": 3,
      "offset": [
        499,
        557
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "188": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        499,
        557
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "190": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        499,
        557
      ],
      "op": "DUP1",
      "path": "7"
    },
    "191": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        499,
        557
      ],
      "op": "REVERT",
      "path": "7"
    },
    "192": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        499,
        557
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "193": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "195": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "197": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "199": {
      "op": "SHL"
    },
    "200": {
      "op": "SUB"
    },
    "201": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "DUP3",
      "path": "7"
    },
    "202": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "AND",
      "path": "7"
    },
    "203": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "205": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "206": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "DUP2",
      "path": "7"
    },
    "207": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "208": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        701
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1"
    },
    "210": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "212": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "DUP2",
      "path": "7"
    },
    "213": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "214": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "215": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "217": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "218": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "219": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "KECCAK256",
      "path": "7"
    },
    "220": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "SLOAD",
      "path": "7"
    },
    "221": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xFF"
    },
    "223": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        711
      ],
      "op": "AND",
      "path": "7"
    },
    "224": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        717
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "225": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        717
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "226": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        687,
        717
      ],
      "op": "EQ",
      "path": "7"
    },
    "227": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        682,
        841
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x10E"
    },
    "230": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        682,
        841
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "231": {
      "op": "POP"
    },
    "232": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "234": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "236": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "238": {
      "op": "SHL"
    },
    "239": {
      "op": "SUB"
    },
    "240": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "AND",
      "path": "7",
      "statement": 0
    },
    "241": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "243": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "244": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "DUP2",
      "path": "7"
    },
    "245": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "246": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        760,
        764
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1"
    },
    "248": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "250": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "DUP2",
      "path": "7"
    },
    "251": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "252": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "253": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "255": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "256": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "257": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        757
      ],
      "op": "KECCAK256",
      "path": "7"
    },
    "258": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        764
      ],
      "op": "DUP1",
      "path": "7"
    },
    "259": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        764
      ],
      "op": "SLOAD",
      "path": "7"
    },
    "260": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "262": {
      "op": "NOT"
    },
    "263": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        764
      ],
      "op": "AND",
      "path": "7"
    },
    "264": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        764
      ],
      "op": "DUP3",
      "path": "7"
    },
    "265": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        764
      ],
      "op": "OR",
      "path": "7"
    },
    "266": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        764
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "267": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        733,
        764
      ],
      "op": "SSTORE",
      "path": "7"
    },
    "268": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        760,
        764
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "269": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "jump": "o",
      "offset": [
        582,
        847
      ],
      "op": "JUMP",
      "path": "7"
    },
    "270": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        682,
        841
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "271": {
      "op": "POP"
    },
    "272": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        825,
        830
      ],
      "op": "PUSH1",
      "path": "7",
      "statement": 1,
      "value": "0x0"
    },
    "274": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "275": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "276": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        582,
        847
      ],
      "op": "POP",
      "path": "7"
    },
    "277": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "jump": "o",
      "offset": [
        582,
        847
      ],
      "op": "JUMP",
      "path": "7"
    },
    "278": {
      "op": "JUMPDEST"
    },
    "279": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "281": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "283": {
      "op": "DUP3"
    },
    "284": {
      "op": "DUP5"
    },
    "285": {
      "op": "SUB"
    },
    "286": {
      "op": "SLT"
    },
    "287": {
      "op": "ISZERO"
    },
    "288": {
      "op": "PUSH2",
      "value": "0x128"
    },
    "291": {
      "op": "JUMPI"
    },
    "292": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "294": {
      "op": "DUP1"
    },
    "295": {
      "op": "REVERT"
    },
    "296": {
      "op": "JUMPDEST"
    },
    "297": {
      "op": "DUP2"
    },
    "298": {
      "op": "CALLDATALOAD"
    },
    "299": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "301": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "303": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "305": {
      "op": "SHL"
    },
    "306": {
      "op": "SUB"
    },
    "307": {
      "op": "DUP2"
    },
    "308": {
      "op": "AND"
    },
    "309": {
      "op": "DUP2"
    },
    "310": {
      "op": "EQ"
    },
    "311": {
      "op": "PUSH2",
      "value": "0x13F"
    },
    "314": {
      "op": "JUMPI"
    },
    "315": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "317": {
      "op": "DUP1"
    },
    "318": {
      "op": "REVERT"
    },
    "319": {
      "op": "JUMPDEST"
    },
    "320": {
      "op": "SWAP4"
    },
    "321": {
      "op": "SWAP3"
    },
    "322": {
      "op": "POP"
    },
    "323": {
      "op": "POP"
    },
    "324": {
      "op": "POP"
    },
    "325": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "9edbedd0999aac0930cb3295f423799451aed429",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\n// this contract provides authorization for registry smart contract\n\n\ncontract RegistryAuthorization {\n\n    address payable public owner;\n    mapping(address => bool ) internal authorize_user;\n    \n    mapping (address=>bytes32) issuerMapping;\n\n    constructor() payable {\n        owner = payable(msg.sender);\n    }\n\n    //grant authorization only for authorize user to perform issuer registration. \n    modifier grantAccess{\n        require(msg.sender == owner || authorize_user[msg.sender]);\n        _;\n    }\n\n\n    function registerAuthorizeUser(address _address) public grantAccess returns(bool success) {\n        if(!(authorize_user[_address]==true)){\n            authorize_user[_address] = true;\n            return true;\n        }else{\n            return false;\n        }\n    }\n}",
  "sourceMap": "135:714:7:-:0;;;346:5;:27;;-1:-1:-1;;;;;;346:27:7;362:10;346:27;;;135:714;;;;;;",
  "sourcePath": "contracts/Registry/RegistryAuthorization.sol",
  "type": "contract"
}