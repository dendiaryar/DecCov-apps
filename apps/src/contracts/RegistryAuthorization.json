{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "registerAuthorizeUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "7": "contracts/Registry/RegistryAuthorization.sol"
  },
  "ast": {
    "absolutePath": "contracts/Registry/RegistryAuthorization.sol",
    "exportedSymbols": {
      "RegistryAuthorization": [
        498
      ]
    },
    "id": 499,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 429,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:31:7"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 498,
        "linearizedBaseContracts": [
          498
        ],
        "name": "RegistryAuthorization",
        "nameLocation": "150:21:7",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "8da5cb5b",
            "id": 431,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "204:5:7",
            "nodeType": "VariableDeclaration",
            "scope": 498,
            "src": "181:28:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 430,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "181:15:7",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 435,
            "mutability": "mutable",
            "name": "authorize_user",
            "nameLocation": "251:14:7",
            "nodeType": "VariableDeclaration",
            "scope": 498,
            "src": "216:49:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 434,
              "keyType": {
                "id": 432,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "224:7:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "216:25:7",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 433,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "235:4:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 439,
            "mutability": "mutable",
            "name": "issuerMapping",
            "nameLocation": "305:13:7",
            "nodeType": "VariableDeclaration",
            "scope": 498,
            "src": "278:40:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
              "typeString": "mapping(address => bytes32)"
            },
            "typeName": {
              "id": 438,
              "keyType": {
                "id": 436,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "287:7:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "278:26:7",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
                "typeString": "mapping(address => bytes32)"
              },
              "valueType": {
                "id": 437,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "296:7:7",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 450,
              "nodeType": "Block",
              "src": "349:46:7",
              "statements": [
                {
                  "expression": {
                    "id": 448,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 442,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 431,
                      "src": "360:5:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 445,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "376:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 446,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "376:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 444,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "368:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_payable_$",
                          "typeString": "type(address payable)"
                        },
                        "typeName": {
                          "id": 443,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "368:8:7",
                          "stateMutability": "payable",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 447,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "368:19:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "360:27:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 449,
                  "nodeType": "ExpressionStatement",
                  "src": "360:27:7"
                }
              ]
            },
            "id": 451,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 440,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "338:2:7"
            },
            "returnParameters": {
              "id": 441,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "349:0:7"
            },
            "scope": 498,
            "src": "327:68:7",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 466,
              "nodeType": "Block",
              "src": "507:89:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 462,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 457,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 454,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "526:3:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 455,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "526:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 456,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 431,
                            "src": "540:5:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "526:19:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "baseExpression": {
                            "id": 458,
                            "name": "authorize_user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 435,
                            "src": "549:14:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 461,
                          "indexExpression": {
                            "expression": {
                              "id": 459,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "564:3:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 460,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "564:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "549:26:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "526:49:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 453,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "518:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 463,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "518:58:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 464,
                  "nodeType": "ExpressionStatement",
                  "src": "518:58:7"
                },
                {
                  "id": 465,
                  "nodeType": "PlaceholderStatement",
                  "src": "587:1:7"
                }
              ]
            },
            "id": 467,
            "name": "grantAccess",
            "nameLocation": "496:11:7",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 452,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "507:0:7"
            },
            "src": "487:109:7",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 496,
              "nodeType": "Block",
              "src": "696:182:7",
              "statements": [
                {
                  "condition": {
                    "id": 482,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "710:33:7",
                    "subExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 480,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 476,
                              "name": "authorize_user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 435,
                              "src": "712:14:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 478,
                            "indexExpression": {
                              "id": 477,
                              "name": "_address",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 469,
                              "src": "727:8:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "712:24:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "74727565",
                            "id": 479,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "738:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "712:30:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 481,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "711:32:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 494,
                    "nodeType": "Block",
                    "src": "832:39:7",
                    "statements": [
                      {
                        "expression": {
                          "hexValue": "66616c7365",
                          "id": 492,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "854:5:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 475,
                        "id": 493,
                        "nodeType": "Return",
                        "src": "847:12:7"
                      }
                    ]
                  },
                  "id": 495,
                  "nodeType": "IfStatement",
                  "src": "707:164:7",
                  "trueBody": {
                    "id": 491,
                    "nodeType": "Block",
                    "src": "744:84:7",
                    "statements": [
                      {
                        "expression": {
                          "id": 487,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 483,
                              "name": "authorize_user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 435,
                              "src": "759:14:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 485,
                            "indexExpression": {
                              "id": 484,
                              "name": "_address",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 469,
                              "src": "774:8:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "759:24:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 486,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "786:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "759:31:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 488,
                        "nodeType": "ExpressionStatement",
                        "src": "759:31:7"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 489,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "812:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 475,
                        "id": 490,
                        "nodeType": "Return",
                        "src": "805:11:7"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "6210d360",
            "id": 497,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 472,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 471,
                  "name": "grantAccess",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 467,
                  "src": "662:11:7"
                },
                "nodeType": "ModifierInvocation",
                "src": "662:11:7"
              }
            ],
            "name": "registerAuthorizeUser",
            "nameLocation": "615:21:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 470,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 469,
                  "mutability": "mutable",
                  "name": "_address",
                  "nameLocation": "645:8:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 497,
                  "src": "637:16:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 468,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "637:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "636:18:7"
            },
            "returnParameters": {
              "id": 475,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 474,
                  "mutability": "mutable",
                  "name": "success",
                  "nameLocation": "687:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 497,
                  "src": "682:12:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 473,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "682:4:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "681:14:7"
            },
            "scope": 498,
            "src": "606:272:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 499,
        "src": "141:740:7",
        "usedErrors": []
      }
    ],
    "src": "33:848:7"
  },
  "bytecode": "6080604052600080546001600160a01b0319163317905561017c806100256000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636210d3601461003b5780638da5cb5b14610063575b600080fd5b61004e610049366004610116565b61008e565b60405190151581526020015b60405180910390f35b600054610076906001600160a01b031681565b6040516001600160a01b03909116815260200161005a565b600080546001600160a01b03163314806100b757503360009081526001602052604090205460ff165b6100c057600080fd5b6001600160a01b03821660009081526001602081905260409091205460ff1615151461010e57506001600160a01b03166000908152600160208190526040909120805460ff19168217905590565b506000919050565b60006020828403121561012857600080fd5b81356001600160a01b038116811461013f57600080fd5b939250505056fea26469706673582212202419ed908d91de32a2cd04ddcf64d356426f621b948e7baed75061a467ecb0ad64736f6c63430008070033",
  "bytecodeSha1": "0196752548d7ffae0d33c7024d506a6aa0e09cce",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.7+commit.e28d00a7"
  },
  "contractName": "RegistryAuthorization",
  "coverageMap": {
    "branches": {
      "7": {
        "RegistryAuthorization.registerAuthorizeUser": {
          "2": [
            526,
            545,
            true
          ],
          "3": [
            549,
            575,
            true
          ]
        }
      }
    },
    "statements": {
      "7": {
        "RegistryAuthorization.registerAuthorizeUser": {
          "0": [
            759,
            790
          ],
          "1": [
            847,
            859
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100365760003560e01c80636210d3601461003b5780638da5cb5b14610063575b600080fd5b61004e610049366004610116565b61008e565b60405190151581526020015b60405180910390f35b600054610076906001600160a01b031681565b6040516001600160a01b03909116815260200161005a565b600080546001600160a01b03163314806100b757503360009081526001602052604090205460ff165b6100c057600080fd5b6001600160a01b03821660009081526001602081905260409091205460ff1615151461010e57506001600160a01b03166000908152600160208190526040909120805460ff19168217905590565b506000919050565b60006020828403121561012857600080fd5b81356001600160a01b038116811461013f57600080fd5b939250505056fea26469706673582212202419ed908d91de32a2cd04ddcf64d356426f621b948e7baed75061a467ecb0ad64736f6c63430008070033",
  "deployedSourceMap": "141:740:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;606:272;;;;;;:::i;:::-;;:::i;:::-;;;694:14:8;;687:22;669:41;;657:2;642:18;606:272:7;;;;;;;;181:28;;;;;-1:-1:-1;;;;;181:28:7;;;;;;-1:-1:-1;;;;;485:32:8;;;467:51;;455:2;440:18;181:28:7;305:219:8;606:272:7;682:12;540:5;;-1:-1:-1;;;;;540:5:7;526:10;:19;;:49;;-1:-1:-1;564:10:7;549:26;;;;:14;:26;;;;;;;;526:49;518:58;;;;;;-1:-1:-1;;;;;712:24:7;::::1;;::::0;;;:14:::1;:24;::::0;;;;;;;;::::1;;:30;;;707:164;;-1:-1:-1::0;;;;;;759:24:7::1;;::::0;;;786:4:::1;759:24;::::0;;;;;;;:31;;-1:-1:-1;;759:31:7::1;::::0;::::1;::::0;;786:4;606:272::o;707:164::-:1;-1:-1:-1::0;854:5:7::1;606:272:::0;;;:::o;14:286:8:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;168:23;;-1:-1:-1;;;;;220:31:8;;210:42;;200:70;;266:1;263;256:12;200:70;289:5;14:286;-1:-1:-1;;;14:286:8:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    141,
    881
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6210D360 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x63 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x76 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5A JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xB7 JUMPI POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST PUSH2 0xC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x10E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 NOT 0xED SWAP1 DUP14 SWAP2 0xDE ORIGIN LOG2 0xCD DIV 0xDD 0xCF PUSH5 0xD356426F62 SHL SWAP5 DUP15 PUSH28 0xAED75061A467ECB0AD64736F6C634300080700330000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        141,
        881
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "5": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "CALLVALUE",
      "path": "7"
    },
    "6": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "DUP1",
      "path": "7"
    },
    "7": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "8": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "12": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "DUP1",
      "path": "7"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "REVERT",
      "path": "7"
    },
    "16": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "17": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "POP",
      "path": "7"
    },
    "18": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "CALLDATASIZE",
      "path": "7"
    },
    "21": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "LT",
      "path": "7"
    },
    "22": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x36"
    },
    "25": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "26": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "CALLDATALOAD",
      "path": "7"
    },
    "29": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "SHR",
      "path": "7"
    },
    "32": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "DUP1",
      "path": "7"
    },
    "33": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0x6210D360"
    },
    "38": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "EQ",
      "path": "7"
    },
    "39": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x3B"
    },
    "42": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "43": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "DUP1",
      "path": "7"
    },
    "44": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0x8DA5CB5B"
    },
    "49": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "EQ",
      "path": "7"
    },
    "50": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x63"
    },
    "53": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "54": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "55": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "57": {
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "DUP1",
      "path": "7"
    },
    "58": {
      "first_revert": true,
      "fn": null,
      "offset": [
        141,
        881
      ],
      "op": "REVERT",
      "path": "7"
    },
    "59": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "60": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x4E"
    },
    "63": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x49"
    },
    "66": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "CALLDATASIZE",
      "path": "7"
    },
    "67": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "69": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x116"
    },
    "72": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "jump": "i",
      "offset": [
        606,
        878
      ],
      "op": "JUMP",
      "path": "7"
    },
    "73": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "74": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x8E"
    },
    "77": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "jump": "i",
      "offset": [
        606,
        878
      ],
      "op": "JUMP",
      "path": "7"
    },
    "78": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "79": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "81": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "82": {
      "op": "SWAP1"
    },
    "83": {
      "op": "ISZERO"
    },
    "84": {
      "op": "ISZERO"
    },
    "85": {
      "op": "DUP2"
    },
    "86": {
      "op": "MSTORE"
    },
    "87": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "89": {
      "op": "ADD"
    },
    "90": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "91": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "93": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "94": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "DUP1",
      "path": "7"
    },
    "95": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "96": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "SUB",
      "path": "7"
    },
    "97": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "98": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "RETURN",
      "path": "7"
    },
    "99": {
      "offset": [
        181,
        209
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "100": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        181,
        209
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "102": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        181,
        209
      ],
      "op": "SLOAD",
      "path": "7"
    },
    "103": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        181,
        209
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x76"
    },
    "106": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        181,
        209
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "107": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "109": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "111": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "113": {
      "op": "SHL"
    },
    "114": {
      "op": "SUB"
    },
    "115": {
      "offset": [
        181,
        209
      ],
      "op": "AND",
      "path": "7"
    },
    "116": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        181,
        209
      ],
      "op": "DUP2",
      "path": "7"
    },
    "117": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        181,
        209
      ],
      "op": "JUMP",
      "path": "7"
    },
    "118": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        181,
        209
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "119": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        181,
        209
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "121": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        181,
        209
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "122": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "124": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "126": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "128": {
      "op": "SHL"
    },
    "129": {
      "op": "SUB"
    },
    "130": {
      "op": "SWAP1"
    },
    "131": {
      "op": "SWAP2"
    },
    "132": {
      "op": "AND"
    },
    "133": {
      "op": "DUP2"
    },
    "134": {
      "op": "MSTORE"
    },
    "135": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "137": {
      "op": "ADD"
    },
    "138": {
      "offset": [
        181,
        209
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x5A"
    },
    "141": {
      "op": "JUMP"
    },
    "142": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "143": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        682,
        694
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "145": {
      "offset": [
        540,
        545
      ],
      "op": "DUP1",
      "path": "7"
    },
    "146": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        540,
        545
      ],
      "op": "SLOAD",
      "path": "7"
    },
    "147": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "149": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "151": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "153": {
      "op": "SHL"
    },
    "154": {
      "op": "SUB"
    },
    "155": {
      "offset": [
        540,
        545
      ],
      "op": "AND",
      "path": "7"
    },
    "156": {
      "offset": [
        526,
        536
      ],
      "op": "CALLER",
      "path": "7"
    },
    "157": {
      "offset": [
        526,
        545
      ],
      "op": "EQ",
      "path": "7"
    },
    "158": {
      "branch": 2,
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        526,
        545
      ],
      "op": "DUP1",
      "path": "7"
    },
    "159": {
      "offset": [
        526,
        575
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xB7"
    },
    "162": {
      "branch": 2,
      "offset": [
        526,
        575
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "163": {
      "op": "POP"
    },
    "164": {
      "offset": [
        564,
        574
      ],
      "op": "CALLER",
      "path": "7"
    },
    "165": {
      "offset": [
        549,
        575
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "167": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        549,
        575
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "168": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        549,
        575
      ],
      "op": "DUP2",
      "path": "7"
    },
    "169": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        549,
        575
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "170": {
      "offset": [
        549,
        563
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1"
    },
    "172": {
      "offset": [
        549,
        575
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "174": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        549,
        575
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "175": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        549,
        575
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "177": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        549,
        575
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "178": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        549,
        575
      ],
      "op": "KECCAK256",
      "path": "7"
    },
    "179": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        549,
        575
      ],
      "op": "SLOAD",
      "path": "7"
    },
    "180": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        549,
        575
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xFF"
    },
    "182": {
      "branch": 3,
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        549,
        575
      ],
      "op": "AND",
      "path": "7"
    },
    "183": {
      "offset": [
        526,
        575
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "184": {
      "offset": [
        518,
        576
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xC0"
    },
    "187": {
      "branch": 3,
      "offset": [
        518,
        576
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "188": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        518,
        576
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "190": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        518,
        576
      ],
      "op": "DUP1",
      "path": "7"
    },
    "191": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        518,
        576
      ],
      "op": "REVERT",
      "path": "7"
    },
    "192": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        518,
        576
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "193": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "195": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "197": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "199": {
      "op": "SHL"
    },
    "200": {
      "op": "SUB"
    },
    "201": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "DUP3",
      "path": "7"
    },
    "202": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "AND",
      "path": "7"
    },
    "203": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "205": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "206": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "DUP2",
      "path": "7"
    },
    "207": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "208": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        726
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1"
    },
    "210": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "212": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "DUP2",
      "path": "7"
    },
    "213": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "214": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "215": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "217": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "218": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "219": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "KECCAK256",
      "path": "7"
    },
    "220": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "SLOAD",
      "path": "7"
    },
    "221": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xFF"
    },
    "223": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        736
      ],
      "op": "AND",
      "path": "7"
    },
    "224": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        742
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "225": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        742
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "226": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        712,
        742
      ],
      "op": "EQ",
      "path": "7"
    },
    "227": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        707,
        871
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x10E"
    },
    "230": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        707,
        871
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "231": {
      "op": "POP"
    },
    "232": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "234": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "236": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "238": {
      "op": "SHL"
    },
    "239": {
      "op": "SUB"
    },
    "240": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "AND",
      "path": "7",
      "statement": 0
    },
    "241": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "243": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "244": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "DUP2",
      "path": "7"
    },
    "245": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "246": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        786,
        790
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1"
    },
    "248": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "250": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "DUP2",
      "path": "7"
    },
    "251": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "252": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "253": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "255": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "256": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "257": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        783
      ],
      "op": "KECCAK256",
      "path": "7"
    },
    "258": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        790
      ],
      "op": "DUP1",
      "path": "7"
    },
    "259": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        790
      ],
      "op": "SLOAD",
      "path": "7"
    },
    "260": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "262": {
      "op": "NOT"
    },
    "263": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        790
      ],
      "op": "AND",
      "path": "7"
    },
    "264": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        790
      ],
      "op": "DUP3",
      "path": "7"
    },
    "265": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        790
      ],
      "op": "OR",
      "path": "7"
    },
    "266": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        790
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "267": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        759,
        790
      ],
      "op": "SSTORE",
      "path": "7"
    },
    "268": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        786,
        790
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "269": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "jump": "o",
      "offset": [
        606,
        878
      ],
      "op": "JUMP",
      "path": "7"
    },
    "270": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        707,
        871
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "271": {
      "op": "POP"
    },
    "272": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        854,
        859
      ],
      "op": "PUSH1",
      "path": "7",
      "statement": 1,
      "value": "0x0"
    },
    "274": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "275": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "276": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "offset": [
        606,
        878
      ],
      "op": "POP",
      "path": "7"
    },
    "277": {
      "fn": "RegistryAuthorization.registerAuthorizeUser",
      "jump": "o",
      "offset": [
        606,
        878
      ],
      "op": "JUMP",
      "path": "7"
    },
    "278": {
      "op": "JUMPDEST"
    },
    "279": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "281": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "283": {
      "op": "DUP3"
    },
    "284": {
      "op": "DUP5"
    },
    "285": {
      "op": "SUB"
    },
    "286": {
      "op": "SLT"
    },
    "287": {
      "op": "ISZERO"
    },
    "288": {
      "op": "PUSH2",
      "value": "0x128"
    },
    "291": {
      "op": "JUMPI"
    },
    "292": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "294": {
      "op": "DUP1"
    },
    "295": {
      "op": "REVERT"
    },
    "296": {
      "op": "JUMPDEST"
    },
    "297": {
      "op": "DUP2"
    },
    "298": {
      "op": "CALLDATALOAD"
    },
    "299": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "301": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "303": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "305": {
      "op": "SHL"
    },
    "306": {
      "op": "SUB"
    },
    "307": {
      "op": "DUP2"
    },
    "308": {
      "op": "AND"
    },
    "309": {
      "op": "DUP2"
    },
    "310": {
      "op": "EQ"
    },
    "311": {
      "op": "PUSH2",
      "value": "0x13F"
    },
    "314": {
      "op": "JUMPI"
    },
    "315": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "317": {
      "op": "DUP1"
    },
    "318": {
      "op": "REVERT"
    },
    "319": {
      "op": "JUMPDEST"
    },
    "320": {
      "op": "SWAP4"
    },
    "321": {
      "op": "SWAP3"
    },
    "322": {
      "op": "POP"
    },
    "323": {
      "op": "POP"
    },
    "324": {
      "op": "POP"
    },
    "325": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "9edbedd0999aac0930cb3295f423799451aed429",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\n// this contract provides authorization for registry smart contract\n\n\ncontract RegistryAuthorization {\n\n    address payable public owner;\n    mapping(address => bool ) internal authorize_user;\n    \n    mapping (address=>bytes32) issuerMapping;\n\n    constructor() payable {\n        owner = payable(msg.sender);\n    }\n\n    //grant authorization only for authorize user to perform issuer registration. \n    modifier grantAccess{\n        require(msg.sender == owner || authorize_user[msg.sender]);\n        _;\n    }\n\n\n    function registerAuthorizeUser(address _address) public grantAccess returns(bool success) {\n        if(!(authorize_user[_address]==true)){\n            authorize_user[_address] = true;\n            return true;\n        }else{\n            return false;\n        }\n    }\n}",
  "sourceMap": "141:740:7:-:0;;;360:5;:27;;-1:-1:-1;;;;;;360:27:7;376:10;360:27;;;141:740;;;;;;",
  "sourcePath": "contracts/Registry/RegistryAuthorization.sol",
  "type": "contract"
}