{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "checkIsRegulator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "2": "contracts/Registry/RegistryAuthorization.sol"
  },
  "ast": {
    "absolutePath": "contracts/Registry/RegistryAuthorization.sol",
    "exportedSymbols": {
      "RegistryAuthorization": [
        120
      ]
    },
    "id": 121,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 78,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:31:2"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 120,
        "linearizedBaseContracts": [
          120
        ],
        "name": "RegistryAuthorization",
        "nameLocation": "144:21:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "8da5cb5b",
            "id": 80,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "196:5:2",
            "nodeType": "VariableDeclaration",
            "scope": 120,
            "src": "173:28:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 79,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "173:15:2",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 84,
            "mutability": "mutable",
            "name": "issuerMapping",
            "nameLocation": "239:13:2",
            "nodeType": "VariableDeclaration",
            "scope": 120,
            "src": "212:40:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
              "typeString": "mapping(address => bytes32)"
            },
            "typeName": {
              "id": 83,
              "keyType": {
                "id": 81,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "221:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "212:26:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bytes32_$",
                "typeString": "mapping(address => bytes32)"
              },
              "valueType": {
                "id": 82,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "230:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 95,
              "nodeType": "Block",
              "src": "281:44:2",
              "statements": [
                {
                  "expression": {
                    "id": 93,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 87,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80,
                      "src": "291:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 90,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "307:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 91,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "307:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 89,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "299:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_payable_$",
                          "typeString": "type(address payable)"
                        },
                        "typeName": {
                          "id": 88,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "299:8:2",
                          "stateMutability": "payable",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 92,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "299:19:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "291:27:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 94,
                  "nodeType": "ExpressionStatement",
                  "src": "291:27:2"
                }
              ]
            },
            "id": 96,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 85,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "270:2:2"
            },
            "returnParameters": {
              "id": 86,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "281:0:2"
            },
            "scope": 120,
            "src": "259:66:2",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 106,
              "nodeType": "Block",
              "src": "434:56:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 102,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 99,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "452:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 100,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "452:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 101,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 80,
                          "src": "466:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "452:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 98,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "444:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "444:28:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 104,
                  "nodeType": "ExpressionStatement",
                  "src": "444:28:2"
                },
                {
                  "id": 105,
                  "nodeType": "PlaceholderStatement",
                  "src": "482:1:2"
                }
              ]
            },
            "id": 107,
            "name": "grantAccess",
            "nameLocation": "423:11:2",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 97,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "434:0:2"
            },
            "src": "414:76:2",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 118,
              "nodeType": "Block",
              "src": "863:42:2",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 114,
                      "name": "_address",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 109,
                      "src": "881:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 115,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80,
                      "src": "893:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "881:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 113,
                  "id": 117,
                  "nodeType": "Return",
                  "src": "874:24:2"
                }
              ]
            },
            "functionSelector": "def0f694",
            "id": 119,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkIsRegulator",
            "nameLocation": "801:16:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 110,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 109,
                  "mutability": "mutable",
                  "name": "_address",
                  "nameLocation": "826:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 119,
                  "src": "818:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 108,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "818:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "817:18:2"
            },
            "returnParameters": {
              "id": 113,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 112,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 119,
                  "src": "858:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 111,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "858:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "857:6:2"
            },
            "scope": 120,
            "src": "792:113:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 121,
        "src": "135:772:2",
        "usedErrors": []
      }
    ],
    "src": "32:875:2"
  },
  "bytecode": "6080604052600080546001600160a01b0319163317905560f8806100246000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638da5cb5b146037578063def0f694146066575b600080fd5b6000546049906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b608560713660046094565b6000546001600160a01b0391821691161490565b6040519015158152602001605d565b60006020828403121560a557600080fd5b81356001600160a01b038116811460bb57600080fd5b939250505056fea264697066735822122076f7247498d590289115b075766035d7d9edb7aad51a82e5f89d1107313ca1ca64736f6c63430008070033",
  "bytecodeSha1": "ff09eea2e1005cd6a6951b88160baba73c70ae51",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.7+commit.e28d00a7"
  },
  "contractName": "RegistryAuthorization",
  "coverageMap": {
    "branches": {
      "2": {}
    },
    "statements": {
      "2": {
        "RegistryAuthorization.checkIsRegulator": {
          "0": [
            874,
            898
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "6080604052348015600f57600080fd5b506004361060325760003560e01c80638da5cb5b146037578063def0f694146066575b600080fd5b6000546049906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b608560713660046094565b6000546001600160a01b0391821691161490565b6040519015158152602001605d565b60006020828403121560a557600080fd5b81356001600160a01b038116811460bb57600080fd5b939250505056fea264697066735822122076f7247498d590289115b075766035d7d9edb7aad51a82e5f89d1107313ca1ca64736f6c63430008070033",
  "deployedSourceMap": "135:772:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;173:28;;;;;-1:-1:-1;;;;;173:28:2;;;;;;-1:-1:-1;;;;;485:32:3;;;467:51;;455:2;440:18;173:28:2;;;;;;;;792:113;;;;;;:::i;:::-;858:4;893:5;-1:-1:-1;;;;;881:17:2;;;893:5;;881:17;;792:113;;;;694:14:3;;687:22;669:41;;657:2;642:18;792:113:2;529:187:3;14:286;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;168:23;;-1:-1:-1;;;;;220:31:3;;210:42;;200:70;;266:1;263;256:12;200:70;289:5;14:286;-1:-1:-1;;;14:286:3:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    135,
    907
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x32 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B EQ PUSH1 0x37 JUMPI DUP1 PUSH4 0xDEF0F694 EQ PUSH1 0x66 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x49 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x85 PUSH1 0x71 CALLDATASIZE PUSH1 0x4 PUSH1 0x94 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH1 0xA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH1 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0xF7247498D590289115B075766035D7D9EDB7AAD51A82E5 0xF8 SWAP14 GT SMOD BALANCE EXTCODECOPY LOG1 0xCA PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        135,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "6": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "DUP1",
      "path": "2"
    },
    "7": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "8": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xF"
    },
    "10": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "11": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "13": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "DUP1",
      "path": "2"
    },
    "14": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "REVERT",
      "path": "2"
    },
    "15": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "16": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "POP",
      "path": "2"
    },
    "17": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "19": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "20": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "LT",
      "path": "2"
    },
    "21": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x32"
    },
    "23": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "24": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "26": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "27": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "29": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "SHR",
      "path": "2"
    },
    "30": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "DUP1",
      "path": "2"
    },
    "31": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x8DA5CB5B"
    },
    "36": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "EQ",
      "path": "2"
    },
    "37": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x37"
    },
    "39": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "40": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "DUP1",
      "path": "2"
    },
    "41": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xDEF0F694"
    },
    "46": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "EQ",
      "path": "2"
    },
    "47": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x66"
    },
    "49": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "50": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "51": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "53": {
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "DUP1",
      "path": "2"
    },
    "54": {
      "first_revert": true,
      "fn": null,
      "offset": [
        135,
        907
      ],
      "op": "REVERT",
      "path": "2"
    },
    "55": {
      "offset": [
        173,
        201
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "56": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "58": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "59": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x49"
    },
    "61": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "62": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "64": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "66": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "68": {
      "op": "SHL"
    },
    "69": {
      "op": "SUB"
    },
    "70": {
      "offset": [
        173,
        201
      ],
      "op": "AND",
      "path": "2"
    },
    "71": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "DUP2",
      "path": "2"
    },
    "72": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "JUMP",
      "path": "2"
    },
    "73": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "74": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "76": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "77": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "79": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "81": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "83": {
      "op": "SHL"
    },
    "84": {
      "op": "SUB"
    },
    "85": {
      "op": "SWAP1"
    },
    "86": {
      "op": "SWAP2"
    },
    "87": {
      "op": "AND"
    },
    "88": {
      "op": "DUP2"
    },
    "89": {
      "op": "MSTORE"
    },
    "90": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "92": {
      "op": "ADD"
    },
    "93": {
      "offset": [
        173,
        201
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "94": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "96": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "97": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "DUP1",
      "path": "2"
    },
    "98": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "99": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "SUB",
      "path": "2"
    },
    "100": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "101": {
      "fn": null,
      "offset": [
        173,
        201
      ],
      "op": "RETURN",
      "path": "2"
    },
    "102": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        792,
        905
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "103": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        792,
        905
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x85"
    },
    "105": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        792,
        905
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x71"
    },
    "107": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        792,
        905
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "108": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        792,
        905
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "110": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        792,
        905
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x94"
    },
    "112": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "jump": "i",
      "offset": [
        792,
        905
      ],
      "op": "JUMP",
      "path": "2"
    },
    "113": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        792,
        905
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "114": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        858,
        862
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "116": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        893,
        898
      ],
      "op": "SLOAD",
      "path": "2",
      "statement": 0
    },
    "117": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "119": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "121": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "123": {
      "op": "SHL"
    },
    "124": {
      "op": "SUB"
    },
    "125": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        881,
        898
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "126": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        881,
        898
      ],
      "op": "DUP3",
      "path": "2"
    },
    "127": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        881,
        898
      ],
      "op": "AND",
      "path": "2"
    },
    "128": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        893,
        898
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "129": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        893,
        898
      ],
      "op": "AND",
      "path": "2"
    },
    "130": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        881,
        898
      ],
      "op": "EQ",
      "path": "2"
    },
    "131": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        881,
        898
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "132": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        792,
        905
      ],
      "op": "JUMP",
      "path": "2"
    },
    "133": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        792,
        905
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "134": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        792,
        905
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "136": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        792,
        905
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "137": {
      "op": "SWAP1"
    },
    "138": {
      "op": "ISZERO"
    },
    "139": {
      "op": "ISZERO"
    },
    "140": {
      "op": "DUP2"
    },
    "141": {
      "op": "MSTORE"
    },
    "142": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "144": {
      "op": "ADD"
    },
    "145": {
      "fn": "RegistryAuthorization.checkIsRegulator",
      "offset": [
        792,
        905
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5D"
    },
    "147": {
      "op": "JUMP"
    },
    "148": {
      "op": "JUMPDEST"
    },
    "149": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "151": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "153": {
      "op": "DUP3"
    },
    "154": {
      "op": "DUP5"
    },
    "155": {
      "op": "SUB"
    },
    "156": {
      "op": "SLT"
    },
    "157": {
      "op": "ISZERO"
    },
    "158": {
      "op": "PUSH1",
      "value": "0xA5"
    },
    "160": {
      "op": "JUMPI"
    },
    "161": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "163": {
      "op": "DUP1"
    },
    "164": {
      "op": "REVERT"
    },
    "165": {
      "op": "JUMPDEST"
    },
    "166": {
      "op": "DUP2"
    },
    "167": {
      "op": "CALLDATALOAD"
    },
    "168": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "170": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "172": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "174": {
      "op": "SHL"
    },
    "175": {
      "op": "SUB"
    },
    "176": {
      "op": "DUP2"
    },
    "177": {
      "op": "AND"
    },
    "178": {
      "op": "DUP2"
    },
    "179": {
      "op": "EQ"
    },
    "180": {
      "op": "PUSH1",
      "value": "0xBB"
    },
    "182": {
      "op": "JUMPI"
    },
    "183": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "185": {
      "op": "DUP1"
    },
    "186": {
      "op": "REVERT"
    },
    "187": {
      "op": "JUMPDEST"
    },
    "188": {
      "op": "SWAP4"
    },
    "189": {
      "op": "SWAP3"
    },
    "190": {
      "op": "POP"
    },
    "191": {
      "op": "POP"
    },
    "192": {
      "op": "POP"
    },
    "193": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "eb361377a1552dd944f64fd6357b4d1a67df863e",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\n// this contract provides authorization for registry smart contract\n\n\ncontract RegistryAuthorization {\n\n    address payable public owner;\n    \n    mapping (address=>bytes32) issuerMapping;\n\n    constructor() payable {\n        owner = payable(msg.sender);\n    }\n\n    //grant authorization only for authorize user to perform issuer registration. \n    modifier grantAccess{\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    // function registerAuthorizeUser(address _address) public grantAccess returns(bool success) {\n    //     if(!(authorize_user[_address]==true)){\n    //         authorize_user[_address] = true;\n    //         return true;\n    //     }else{\n    //         return false;\n    //     }\n    // }\n\n    function checkIsRegulator(address _address)  public view returns (bool){\n         return _address == owner;\n    }\n}",
  "sourceMap": "135:772:2:-:0;;;291:5;:27;;-1:-1:-1;;;;;;291:27:2;307:10;291:27;;;135:772;;;;;;",
  "sourcePath": "contracts/Registry/RegistryAuthorization.sol",
  "type": "contract"
}